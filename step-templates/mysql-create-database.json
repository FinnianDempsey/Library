{
    "Id": "4a222ac3-ff4b-4328-8778-1c44eebdedde",
    "Name": "MySQL - Create Database If Not Exists",
    "Description": "Creates a MySQL database if it doesn't already exist.  This template is also compatible with MariaDB.\n\nNote - this template will install the Nuget package provider if it's not already present.\n\nNote:\n- AWS EC2 IAM Role authentication requires the AWS CLI to be installed.",
    "ActionType": "Octopus.Script",
    "Author": "twerthi",
    "Version": 6,
    "Packages": [],
    "Properties": {
      "Octopus.Action.Script.ScriptSource": "Inline",
      "Octopus.Action.Script.Syntax": "PowerShell",
      "Octopus.Action.Script.ScriptBody": "# Define functions\nfunction Get-ModuleInstalled\n{\n    # Define parameters\n    param(\n        $PowerShellModuleName\n    )\n\n    # Check to see if the module is installed\n    if ($null -ne (Get-Module -ListAvailable -Name $PowerShellModuleName))\n    {\n        # It is installed\n        return $true\n    }\n    else\n    {\n        # Module not installed\n        return $false\n    }\n}\n\nfunction Get-MySql-Data-NuGetPackage\n{\n\t# Define parameters\n    param ($DownloadPath)\n\n\t# Check to see if folder exists\n\tif ((Test-Path -Path $DownloadPath) -ne $true)\n    {\n    \t# Create the folder\n        Write-Host \"Creating $DownloadPath ...\"\n        New-Item -Path $DownloadPath -ItemType \"Directory\" | Out-Null\n    }\n    \n    # Download the NuGet package\n    Write-Host \"Downloading MySql.Data NuGet package ...\"\n    Invoke-WebRequest -Uri \"https://www.nuget.org/api/v2/package/MySql.Data/8.0.28\" -Outfile \"$DownloadPath/MySql.zip\" -UseBasicParsing | Out-Null\n\n    Write-Host \"Extracting MySql.Data NuGet package ... \"\n    \n\t# Extract\n\tExpand-Archive -Path \"$DownloadPath/MySql.zip\" -DestinationPath \"$DownloadPath\"\n    \n    # Get net452 version of dll\n    $mySqlDll = Get-ChildItem -Path \"$DownloadPath/lib/net452/MySql.Data.dll\"\n    \n    # Return the fullpath\n    return $mySqlDll.FullName\n}\n\nfunction Install-PowerShellModule\n{\n    # Define parameters\n    param(\n        $PowerShellModuleName,\n        $LocalModulesPath\n    )\n\n\t# Check to see if the package provider has been installed\n    if ((Get-NugetPackageProviderNotInstalled) -ne $false)\n    {\n    \t# Display that we need the nuget package provider\n        Write-Host \"Nuget package provider not found, installing ...\"\n        \n        # Install Nuget package provider\n        Install-PackageProvider -Name Nuget -Force\n    }\n\n\t# Save the module in the temporary location\n    Save-Module -Name $PowerShellModuleName -Path $LocalModulesPath -Force\n}\n\nfunction Get-NugetPackageProviderNotInstalled\n{\n\t# See if the nuget package provider has been installed\n    return ($null -eq (Get-PackageProvider -ListAvailable -Name Nuget -ErrorAction SilentlyContinue))\n}\n\nfunction Get-DatabaseExists\n{\n\t# Define parameters\n    param ($DatabaseName)\n    \n\t# Execute query\n    return Invoke-SqlQuery \"SHOW DATABASES LIKE '$DatabaseName';\"\n}\n\n# Define PowerShell Modules path\n$LocalModules = (New-Item \"$PSScriptRoot\\Modules\" -ItemType Directory -Force).FullName\n$env:PSModulePath = \"$LocalModules$([System.IO.Path]::PathSeparator)$env:PSModulePath\"\n$PowerShellModuleName = \"SimplySql\"\n\n# Set secure protocols\n[System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor [Net.SecurityProtocolType]::Tls11 -bor [System.Net.SecurityProtocolType]::Tls12\n\n# Check to see if SimplySql module is installed\nif ((Get-ModuleInstalled -PowerShellModuleName $PowerShellModuleName) -ne $true)\n{\n    # Tell user what we're doing\n    Write-Output \"PowerShell module $PowerShellModuleName is not installed, downloading temporary copy ...\"\n\n    # Install temporary copy\n    Install-PowerShellModule -PowerShellModuleName $PowerShellModuleName -LocalModulesPath $LocalModules\n}\n\n# Display\nWrite-Output \"Importing module $PowerShellModuleName ...\"\n\n# Check to see if it was downloaded\nif ((Test-Path -Path \"$LocalModules\\$PowerShellModuleName\") -eq $true)\n{\n\t# Import from temp location\n    $PowerShellModuleName =  \"$LocalModules\\$PowerShellModuleName\"\n}\n\n# Declare connectionstring\n$connectionString = \"Server=$createMySQLServerName;Port=$createPort;\"\n\n# Update the connection string based on authentication method\nswitch ($mySqlAuthenticationMethod)\n{\n\t\"awsiam\"\n    {\n    \t# TEMPORARY SOLUTION - Replace the dll\n        $mySqlDll = Get-MySql-Data-NuGetPackage -DownloadPath \"$LocalModules/MySql.Data\"\n\n        $simplySqlMySqlDll = (Get-ChildItem -Path \"$LocalModules/SimplySql\" -Recurse | Where-Object {$_.Name -eq \"MySql.Data.dll\"}).FullName\n\n        Write-Host \"Overwriting MySql.data.dll with NuGet package version to support logging in through IAM roles ...\"\n        Copy-Item -Path $mySqlDll -Destination $simplySqlMySqlDll -Force\n\n\t\t# Region is part of the RDS endpoint, extract\n        $region = ($createMySQLServerName.Split(\".\"))[2]\n\n\t\tWrite-Host \"Generating AWS IAM token ...\"\n\t\t$createUserPassword = (aws rds generate-db-auth-token --hostname $createMySQLServerName --region $region --port $createPort --username $createUsername)\n        \n        # Append remaining portion of connection string\n        $connectionString += \";Uid=$createUsername;Pwd=`\"$createUserPassword`\";\"\n        \n        break\n    }\n    \n    \"usernamepassword\"\n    {\n        # Append remaining portion of connection string\n        $connectionString += \";Uid=$createUsername;Pwd=`\"$createUserPassword`\";\"\n        \n        break    \n    }\n    \n    \"windowsauthentication\"\n    {\n    \t# Append remaining portion of connection string\n        $connectionString += \";IntegratedSecurity=yes;Uid=$createUsername;\"\n    }\n}\n\n\n# Import the module\nImport-Module -Name $PowerShellModuleName\n\ntry\n{\n\t# Connect to MySQL\n    #$connectionString = \"Server=$createMySQLServerName;Port=$createPort;Uid=$createUsername;Pwd=`\"$createUserPassword`\";\"\n    if ($createUseSSL -eq \"True\")\n    {\n\t\t# Append to connection string\n        $connectionString += \"SslMode=Required;\"\n    }\n    else\n    {\n    \t# Disable ssl\n        $connectionString += \"SslMode=none;\"\n    }\n    \n    Open-MySqlConnection -ConnectionString $connectionString\n    #Open-MySqlConnection -Server $createMySQLServerName -Credential $ServerCredential -Port $createPort\n\n    # See if database exists\n    $databaseExists = Get-DatabaseExists -DatabaseName $createDatabaseName\n\n    if ($databaseExists.ItemArray.Count -eq 0)\n    {\n        # Create database\n        Write-Output \"Creating database $createDatabaseName ...\"\n        $executionResult = Invoke-SqlUpdate \"CREATE DATABASE $createDatabaseName;\"\n\n        # Check result\n        if ($executionResult -ne 1)\n        {\n            # Commit transaction\n            Write-Error \"Create schema failed.\"\n        }\n        else\n        {\n        \t# See if it was created\n            $databaseExists = Get-DatabaseExists -DatabaseName $createDatabaseName\n            \n            # Check array\n            if ($databaseExists.ItemArray.Count -eq 1)\n            {\n            \t# Success\n                Write-Output \"$createDatabaseName created successfully!\"\n            }\n            else\n            {\n            \t# Failed\n                Write-Error \"$createDatabaseName was not created!\"\n            }\n        }\n    }\n    else\n    {\n    \t# Display message\n        Write-Output \"Database $createDatabaseName already exists.\"\n    }\n}\nfinally\n{\n    Close-SqlConnection\n}\n\n\n"
    },
    "Parameters": [
      {
        "Id": "8fc92b80-5122-44a0-b3d8-a1d022a35055",
        "Name": "createMySQLServerName",
        "Label": "Server",
        "HelpText": "Hostname (or IP) of the MySQL database server.",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        }
      },
      {
        "Id": "251a6a8d-6683-4646-8b83-ffa5e36ad6d3",
        "Name": "mySqlAuthenticationMethod",
        "Label": "Authentication Method",
        "HelpText": "Method used to authenticate to the MySQL server.",
        "DefaultValue": "usernamepassword",
        "DisplaySettings": {
          "Octopus.ControlType": "Select",
          "Octopus.SelectOptions": "awsiam|AWS EC2 IAM Role\nusernamepassword|Username\\Password\nwindowsauthentication|Windows Authentication"
        }
      },  
      {
        "Id": "df993ccf-71ab-48de-9a67-e2af6653d35e",
        "Name": "createUsername",
        "Label": "Username",
        "HelpText": "Username to use for the connection",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        }
      },
      {
        "Id": "8a07f25d-a7db-466e-a356-9155cbc5f258",
        "Name": "createUserPassword",
        "Label": "Password",
        "HelpText": "Password for the user account",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "Sensitive"
        }
      },
      {
        "Id": "2af18465-c8d1-48f6-afce-1b1b30ae9559",
        "Name": "createDatabaseName",
        "Label": "Database Name",
        "HelpText": "Name of the database to create",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        }
      },
      {
        "Id": "f55e2a34-7a82-4d92-83bb-a19f304774d8",
        "Name": "createPort",
        "Label": "Port",
        "HelpText": "Port for the database instance.",
        "DefaultValue": "3306",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        }
      },
      {
        "Id": "0c7a8dd8-fb07-4287-9c7a-6a14886bd2db",
        "Name": "createUseSSL",
        "Label": "Use SSL",
        "HelpText": "Check this box to force the use of SSL.",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "Checkbox"
        }
      }
    ],
    "LastModifiedBy": "twerthi",
    "$Meta": {
      "ExportedAt": "2020-05-25T21:24:19.087Z",
      "OctopusVersion": "2020.1.18",
      "Type": "ActionTemplate"
    },
    "Category": "mysql"
  }